// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    Mux16(a=x, b=false, sel=zx, out=ZEROx);  // Zero the x input if zx is true
    Not16(in=ZEROx, out=NOTx);
    Mux16(a=ZEROx, b=NOTx, sel=nx, out=INVx); // Negate the zeroed x if nx is true
    Mux16(a=y, b=false, sel=zy, out=ZEROy);  // Zero the y input if zy is true
    Not16(in=ZEROy, out=noty);
    Mux16(a=ZEROy, b=noty, sel=ny, out=INVy); // Negate the zeroed y input if ny is true
    Add16(a=INVx, b=INVy, out=xADDy);         // If f == 1, compute x + y
    And16(a=INVx, b=INVy, out=xANDy);         // If f == 0, compute x & 
    Mux16(a=xANDy, b=xADDy, sel=f, out=result); // Choose + or & based on f

    Not16(in=result, out=NOTresult);          // Negate the operation result if negout is true
    Mux16(a=result, b=NOTresult, sel=no, out=out, // Output the result or its negation based on negout
      out[0..7] = zeroresultR,
      out[8..15] = zeroresultL,
      out[15] = ng);                       // Set the most significant as the negative flag

    Or8Way(in=zeroresultR, out=result1); 
    Or8Way(in=zeroresultL, out=result2);
    Or(a=result1, b=result2, out=NOTzeroresult); // Determine if output is non-zero
    Not(in=NOTzeroresult, out=zeroresult);     // Set the zero flag to 1 if output is zero, else 0
   }